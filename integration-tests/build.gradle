buildscript {

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: "java"

repositories {
    mavenCentral()
}

dependencies {
    compile libraries.http_client
    compile libraries.jackson_dataformat_yaml
    compile libraries.jackson_databind
    compile libraries.json_path
    compile libraries.spring_boot_starter_websocket
    compile("org.json:json:20180813")
    compile("io.jsonwebtoken:jjwt:0.9.1")
    compile(project(":security-module"))

    testCompile libraries.junit
    testCompile libraries.hamcrest
    testCompile libraries.rest_assured
    testCompile libraries.awaitility
    testCompile libraries.logback_classic
    testCompile libraries.powermock_api_mockito2
    testCompile libraries.power_mock_junit4
    testCompile libraries.power_mock_junit4_rule
    testCompile libraries.jsoup
    testCompile libraries.rest_assured
}

jar {
    baseName = "message-tests"
}

test.enabled = false

task startUpCheck(type: Test) {
    group "message test"
    description "Check that the API Mediation Layer is up and runnig"

    systemProperties System.properties
    useJUnit {
        includeCategories "com.ca.mfaas.utils.categories.StartupCheck"
    }
    outputs.upToDateWhen { false }
}

task runIntegrationTests(type: Test) {
    group "Integration tests"
    description "Run only tests without long tests"

    dependsOn startUpCheck
    systemProperties System.properties
    useJUnit {
        excludeCategories(
            "com.ca.mfaas.utils.categories.StartupCheck",
            "com.ca.mfaas.utils.categories.SlowTests",
            "com.ca.mfaas.utils.categories.LocalDeploymentTest"
        )
    }
}

task runLocalDeploymentIntegrationTests(type: Test) {
    group "Integration tests"
    description "Run message tests with local deployment of helloworld-spring"

    dependsOn startUpCheck
    systemProperties System.getProperties()
    useJUnit {
        excludeCategories(
            "com.ca.mfaas.utils.categories.StartupCheck",
            "com.ca.mfaas.utils.categories.SlowTests"
        )
    }
    outputs.upToDateWhen { false }
}

task runAllIntegrationTests(type: Test) {
    group "Integration tests"
    description "Run all message tests"

    dependsOn startUpCheck
    systemProperties System.properties
    useJUnit {
        excludeCategories(
            "com.ca.mfaas.utils.categories.StartupCheck",
            "com.ca.mfaas.utils.categories.LocalDeploymentTest"
        )
    }
    outputs.upToDateWhen { false }
}
